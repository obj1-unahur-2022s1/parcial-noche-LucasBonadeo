import comidas.*
import cocina.*

describe "Test de Comidas" {
	
	const hamburguesaCarne = new HamburguesaDeCarne(pan=panCasero)
	
	const hamburguesaVegetariana = new HamburguesaVegetariana(legumbre="garbanzos", pan=panMasaMadre)
	
	const provoleta = new Provoleta(peso=190, tieneEspecias=true)
	
	const parrillada = new Parrillada()
	
	const asado = new Corte(nombre="asado", calidad=10, peso=250)
	const entrania = new Corte(nombre="entrania", calidad=7, peso=200)
	const chorizo = new Corte(nombre="chorizo", calidad=8, peso=50)
	
	method initialize() {
		parrillada.agregarCorte(asado)
		parrillada.agregarCorte(entrania)
		parrillada.agregarCorte(chorizo)
	}
	
	test "Valoración de la Hambruguesa de Carne con pan casero" {
		assert.equals(80, hamburguesaCarne.valoracion())	
	}

	test "Valoración de la Hambruguesa Vegetariana, con pan de masaMadre y de garbanzos como legumbre" {
		assert.equals(122, hamburguesaVegetariana.valoracion())	
	}	
	
	test "Provoleta, de peso 190 y con especias." {
		assert.that(provoleta.esEspecial())	
	}
	
	test "Parrillada" {
		assert.equals(147, parrillada.valoracion())	
	}
	
}

describe "Test de cocina" {
	
	const hamburguesaCarne1 = new HamburguesaDeCarne(pan=panMasaMadre)
	
	const hamburguesaCarne2 = new HamburguesaDeCarne(pan=panCasero)
	
	const hamburguesaVegetariana = new HamburguesaVegetariana(legumbre="garbanzos", pan=panMasaMadre)

	method initialize() {
		cocina.agregarComida(hamburguesaCarne1)
		cocina.agregarComida(hamburguesaCarne2)
		cocina.agregarComida(hamburguesaCarne1)
		cocina.agregarComida(hamburguesaVegetariana)
	}
	
	test "La cocina tiene buena oferta vegetariana" {
		assert.that(cocina.tieneBuenaOfertaVegetariana())
	}
	
	test "La cocina no tiene buena oferta vegetariana" {
		cocina.agregarComida(hamburguesaCarne1)
		assert.notThat(cocina.tieneBuenaOfertaVegetariana())
	}
	
	test "Plato fuerte carnivoro" {
		assert.that(cocina.platoFuerteCarnivoro() == hamburguesaCarne1)
	}
	
}